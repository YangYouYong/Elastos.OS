//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

library
{
    typedef [dummytype] Byte UInt8;
    typedef [dummytype] Int32 Address;

    typedef [dummytype] EGuid ClassID;
    typedef [dummytype] EMuid InterfaceID;
    typedef [dummytype] InterfaceID EIID;

    typedef [dummytype] Int32 MemorySize;

    typedef [dummytype] Int32 Handle32;
    typedef [dummytype] Int64 Handle64;

    typedef [dummytype] Handle32* PHandle32;
    typedef [dummytype] Handle64* PHandle64;

    interface IInterface {
    }

    typedef [dummytype] IInterface * PInterface;

    interface IObject extends IInterface {
        Aggregate(
            [in] Int32 type,
            [in] IInterface *object);

        GetDomain(
            [out] IInterface **object);

        GetClassID(
            [out] ClassID *clsid);

        GetClassInfo(
            [out] IInterface **clsInfo);

        GetHashCode(
            [out] Int32 * pHashCode);

        Equals(
            [in] IInterface * pInterface,
            [out] Boolean * pEquals);

        ToString(
            [out] String* pInfo);
    }

    typedef [dummytype] Int32 AggregateType;

    interface IAspect extends IInterface {
        AspectAggregate(
            [in] AggregateType type,
            [in] IInterface *object);

        AspectGetDomain(
            [out] IInterface **object);

        GetAspectID(
            [out] ClassID *clsid);
    }

    interface IClassObject extends IInterface {
        CreateObject(
            [in] IInterface *outer,
            [in] InterfaceID riid,
            [out] IInterface **object);

        StayResident(
            [in] Boolean bIsStayResident);
    }

    typedef [dummytype] IClassObject * PClassObject;

    interface IProxyDeathRecipient extends IInterface {
        ProxyDied();
    }

    interface IWeakReference extends IInterface {
        Resolve(
            [in] InterfaceID riid,
            [out] IInterface** objectReference);
    }

    interface IWeakReferenceSource extends IInterface {
        GetWeakReference(
            [out] IWeakReference** weakReference);
    }
}
