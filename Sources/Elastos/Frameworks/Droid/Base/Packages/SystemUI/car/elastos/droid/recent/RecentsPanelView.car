//=========================================================================
// Copyright (C) 2012 The Elastos Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//=========================================================================

module
{
    interface Elastos.Droid.SystemUI.Recent.IRecentTasksLoader;
    interface Elastos.Droid.SystemUI.Recent.ITaskDescription;
    using interface Elastos.Droid.Animation.IAnimator;
    using interface Elastos.Droid.Database.IDataSetObserver;
    using interface Elastos.Droid.Graphics.ICanvas;
    using interface Elastos.Droid.View.IMotionEvent;
    using interface Elastos.Droid.View.IView;
    using interface Elastos.Droid.View.IViewGroup;
    using interface Elastos.Droid.Widget.IAdapterView;
    using interface Elastos.Core.IRunnable;
    using interface Elastos.Utility.IArrayList;

    namespace Elastos {
    namespace Droid {
    namespace SystemUI {
    namespace Recent {

    /**
     * @Involve
     * interface Elastos.Droid.Widget.IBaseAdapter
     * interface Elastos.Droid.Widget.IListAdapter
     * interface Elastos.Droid.Widget.ISpinnerAdapter
     * interface Elastos.Droid.Widget.IAdapter
     */
    [local]
    interface ITaskDescriptionAdapter {
        GetCount(
            [out] Int32* count);

        GetItem(
            [in] Int32 position,
            [out] IInterface** item);

        GetItemId(
            [in] Int32 position,
            [out] Int64* itemId);

        CreateView(
            [in] IViewGroup* parent,
            [out] IView** view);

        GetView(
            [in] Int32 position,
            [in] IView* convertView,
            [in] IViewGroup* parent,
            [out] IView** view);

        RecycleView(
            [in] IView* v);
    }

    [local]
    interface IRecentsScrollView {
        NumItemsInOneScreenful(
            [out] Int32* num);

        SetAdapter(
            [in] ITaskDescriptionAdapter* adapter);

        SetCallback(
            [in] IRecentsCallback* cb);

        SetMinSwipeAlpha(
            [in] Float minAlpha);

        FindViewForTask(
            [in] Int32 persistentTaskId,
            [out] IView** view);

        DrawFadedEdges(
            [in] ICanvas* c,
            [in] Int32 left,
            [in] Int32 right,
            [in] Int32 top,
            [in] Int32 bottom);

        SetOnScrollListener(
            [in] IRunnable* listener);
    }

    [local]
    interface IRecentsPanelView {
        NumItemsInOneScreenful(
            [out] Int32* count);

        IsInContentArea(
            [in] Int32 x,
            [in] Int32 y,
            [out] Boolean* result);

        Show(
            [in] Boolean show);

        Show(
            [in] Boolean show,
            [in] IArrayList* recentTaskDescriptions,
            [in] Boolean firstScreenful,
            [in] Boolean waitingForWindowAnimation);

        OnUiHidden();

        Dismiss();

        DismissAndGoBack();

        OnAnimationCancel(
            [in] IAnimator* animation);

        OnAnimationEnd(
            [in] IAnimator* animation);

        OnAnimationRepeat(
            [in] IAnimator* animation);

        OnAnimationStart(
            [in] IAnimator* animation);

        IsShowing(
            [out] Boolean* result);

        SetRecentTasksLoader(
            [in] IRecentTasksLoader* loader);

        UpdateValuesFromResources();

        SetMinSwipeAlpha(
            [in] Float minAlpha);

        OnTaskThumbnailLoaded(
            [in] ITaskDescription* td);

        OnWindowAnimationStart();

        ClearRecentTasksList();

        OnTaskLoadingCancelled();

        RefreshViews();

        RefreshRecentTasksList();

        OnTasksLoaded(
            [in] IArrayList* tasks,
            [in] Boolean firstScreenful);

        SimulateClick(
            [in] Int32 persistentTaskId,
            [out] Boolean* result);

        HandleOnClick(
            [in] IView* view);

        OnItemClick(
            [in] IAdapterView* parent,
            [in] IView* view,
            [in] Int32 position,
            [in] Int64 id);

        HandleSwipe(
            [in] IView* view);

        OnInterceptTouchEvent(
            [in] IMotionEvent* ev,
            [out] Boolean* result);

        HandleLongPress(
            [in] IView* selectedView,
            [in] IView* anchorView,
            [in] IView* thumbnailView);
    }

    } // namespace Recent
    } // namespace SystemUI
    } // namespace Droid
    } // namespace Elastos
}
